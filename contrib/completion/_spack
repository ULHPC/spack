#compdef spack
########################################################################################
# -*- mode:sh; -*-
# Time-stamp: <Tue 2016-11-15 16:18 svarrette>
#
# ZSH completion for [Spack](https://github.com/LLNL/spack)
#
# Copyright (c) 2016 Sebastien Varrette <Sebastien.Varrette@uni.lu>
#
# Just because I was tired of typing all commands during the Spack tutorial at SC'16
# As I'm not a zsh-completion expert, consider this as a preliminary quick and dirty
# a real expert should review and complete using genzshcomp for instance
#
# Reasonable resources I checked to build this file:
#  - the _bundle, _vagrant, _packer and _yum completion file
# and these howto:
#  - https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org
#  - http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Completion-Functions
#  - https://zv.github.io/note/a-review-of-zsh-completion-utilities
########################################################################################
# Enable this completion file by adding somewhere in your zsh configuration (most
# probably ~/.zshrc):
#     fpath=($SPACK_ROOT/contrib/completion $fpath)
#
typeset -A opt_args

##################
__spack_packages()
{
    # inspired by _vagrant
    _wanted application expl 'command' compadd $(command spack list | sort)
}

############################
__spack_installed_packages()
{
    # inspired by _vagrant
    _wanted application expl 'command' compadd $(command spack find | sort)
}
__mirrors()
{
    _wanted application expl 'command' compadd $(command spack mirror list |\
                                                     awk '{ print $1}' | \
                                                     sort)
}
############################
__specs()
{
    # Honestly, I have no clue how to properly parse and help on spack specs
    # Need expert of zsh here to map the grammar
    _nothing
}

# Main dispatcher
_spack()
{
    local -a _spack_cmds
    _spack_cmds=(
        'activate:Activate a package extension.'
        'arch:Print architecture information about this machine.'
        'bootstrap:Create a new installation of spack in another prefix'
        'build:Stops at build stage when installing a package, if possible'
        'cd:cd to spack directories in the shell.'
        'checksum:Checksum available versions of a package.'
        'clean:Remove build stage and source tarball for packages.'
        'compiler:Manage compilers'
        "compilers:List available compilers. Same as 'spack compiler list'."
        'config:Get and set configuration options.'
        'configure:Stops at configuration stage when installing a package, if possible'
        'create:Create a new package file from an archive URL'
        'deactivate:Deactivate a package extension.'
        'debug:Debugging commands for troubleshooting Spack.'
        'dependents:Show installed packages that depend on another.'
        'diy:Do-It-Yourself: build from an existing source directory.'
        'doc:Run pydoc from within spack.'
        'edit:Open package files in $EDITOR'
        'env:Run a command with the install environment for a spec.'
        'extensions:List extensions for package.'
        'fetch:Fetch archives for packages'
        'find:Find installed spack packages'
        'flake8:Runs source code style checks on Spack. Requires flake8.'
        'graph:Generate graphs of package dependency relationships.'
        'help:Get help on spack and its commands'
        'info:Get detailed information on a particular package'
        'install:Build and install packages'
        'list:Print available spack packages to stdout in different formats'
        'load:Add package to environment using modules.'
        'location:Print out locations of various directories used by Spack'
        'md5:Calculate md5 checksums for files/urls.'
        'mirror:Manage mirrors.'
        'module:Manipulate module files'
        'patch:Patch expanded archive sources in preparation for install'
        'pkg:Query packages associated with particular git revisions.'
        'providers:List packages that provide a particular virtual package'
        'purge:Remove temporary build files and/or downloaded archives'
        'python:Launch an interpreter as spack would launch a command'
        "reindex:Rebuild Spack's package database."
        'repo:Manage package source repositories.'
        'restage:Revert checked out package source code.'
        "setup:Create a configuration script and module, but don't build."
        'spec:print out abstract and concrete versions of a spec.'
        'stage:Expand downloaded archive in preparation for install'
        'test:Run unit tests'
        'uninstall:Remove an installed package'
        'unload:Remove package from environment using module.'
        'unuse:Remove package from environment using dotkit.'
        'url-parse:Show parsing of a URL, optionally spider web for versions.'
        'urls:Inspect urls used by packages in spack.'
        'use:Add package to environment using dotkit.'
        'versions:List available versions of a package'
        'view:Produce a single-rooted directory view of a spec.'
    )

    local curcontext="$curcontext" state line ret=1
    typeset -A opt_args

    _arguments -C \
               '(- *)'{-h,--help}'[show this help message and exit]' \
               '(- *)'{--version,-V}"[show program's version number and exit]" \
               '(- *)'{-d,--debug}'[Write out debug logs during compile]' \
               '(- *)'{-D,--pdb}'[Run spack under the pdb debugger]' \
               '(- *)'{-k,--insecure}'[Do not check ssl certificates when downloading.]' \
               '(- *)'{-m,--mock}'[Use mock packages instead of real ones]' \
               '(- *)'{-p,--profile}'[Profile execution using cProfile]' \
               '(- *)'{-n,--dry_run}'[Perform a trial run with (normally) no changes made]' \
               '(- *)'{-v,--verbose}'[Print additional output during builds]' \
               ': :->command' \
               '*:: :->options' && ret=0
    case $state in
        (command)
            _describe -t commands 'spack' _spack_cmds && ret=0
            ;;
        (options)
            curcontext=${curcontext%:*}-$line[1]:
            case $line[1] in
                (activate)  __spack_activate  && ret=0;;
                (arch)      __spack_arch      && ret=0;;
                (bootstrap) __spack_bootstrap && ret=0;;
                (build)     __spack_build     && ret=0;;
                (cd)        __spack_cd        && ret=0;;
                (checksum)  __spack_checksum  && ret=0;;
                (clean)     __spack_clean     && ret=0;;
                (compiler)  __spack_compiler  && ret=0;;
                (compilers)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               '--scope[Configuration scope to modify]:scope:(defaults defaults/darwin site site/darwin user user/darwin)' \
                               "*::args:__spack_packages" && ret=0;;
                (config)    __spack_config    && ret=0;;
                (configure)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               {-v,--verbose}'[Print additional output during builds]' \
                               "*::args:__spack_packages" && ret=0;;
                (create)   __spack_create      && ret=0 ;;
                (deactivate)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               {-f,--force}'[Run deactivation even if spec is NOT currently activated.]' \
                               {-a,--all}'[Deactivate all extensions of an extendable package, or deactivate an extension AND its dependencies.]' \
                               "*::args:__spack_packages" && ret=0;;
                (debug)   __spack_debug        && ret=0;;
                (dependends|doc|env|providers|reindex)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               '*::args:_nothing' && ret=0;;
                (diy)        __spack_diy        && ret=0;;
                (edit)       __spack_edit       && ret=0;;
                (extensions) __spack_extensions && ret=0;;
                (fetch)      __spack_fetch      && ret=0;;
                (find)       __spack_find       && ret=0;;
                (flake8)     __spack_flake8     && ret=0;;
                (graph)      __spack_graph      && ret=0;;
                (help)
                    # could do better here to avoid repetition
                    _describe -t commands 'spack help' _spack_cmds && ret=0
                    ;;
                (info)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               "*::args:__spack_packages" && ret=0;;
                (install)    __spack_install    && ret=0;;
                (list)       __spack_list       && ret=0;;
                (load)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               "*::args:__specs" && ret=0;;
                (location)   __spack_location   && ret=0;;
                (md5)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               "*::args:_files" && ret=0;;
                (mirror)      __spack_mirror    && ret=0;;
                (module)      __spack_module    && ret=0;;
                (patch)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               {-n,--no-checksum}'[Do not check downloaded packages against checksumPrint additional output during builds]' \
                               "*::args:__spack_installed_packages" && ret=0;;

                (pkg)         __spack_pkg       && ret=0;;
                (purge)       __spack_purge     && ret=0;;
                (python)
                    _arguments -s -S \
                               {-h,--help}'[show this help message and exit]:' \
                               '-c[Command to execute.]:command:' && ret=0;;
                (repo)        __spack_repo      && ret=0;;

            esac
            ;;
    esac
    return ret
}

###############################
# spack activate [-h] [-f] ...
#
# positional arguments:
#  spec         spec of package extension to activate.
##
__spack_activate()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-f,--force}'[Activate without first activating dependencies.]' \
               '*::args:__specs'
}

###############################
# spack arch [-h] [-p]
##
__spack_arch()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               {-p,--platform}'[Print only the platform.]'
}
###############################
# spack bootstrap [-h] [-r REMOTE] prefix
#
#positional arguments:
#  prefix                names of prefix where we should install spack
##
__spack_bootstrap()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    # TODO: cache potential remotes
    _arguments -C \
               {-h,--help}'[show this help message and exit]:' \
               {-r,--remote}'[name of the remote to bootstrap from]:remote' \
               '*::args:_files'
}
###############################
# spack build [-h] [-v] ...
#
#positional arguments:
#  package        spec of the package to install
##
__spack_build()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    # TODO: cache potential remotes
    _arguments -C \
               {-h,--help}'[show this help message and exit]:' \
               {-v,--verbose}'[Print additional output during builds]' \
               '*::args:__spack_packages'
}
###########################################################
# spack cd [-h] [-m | -r | -i | -p | -P | -s | -S | -b] ...
#
#positional arguments:
#  spec               spec of package to fetch directory for.
##
__spack_cd()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    # TODO: cache potential remotes
    _arguments -C \
               {-h,--help}'[show this help message and exit]:' \
               {-m,--module-dir}'[Spack python module directory.]' \
               {-r,--spack-root}'[Spack installation root.]' \
               {-i,--install-dir}'[Install prefix for spec (spec need not be installed).]' \
               {-p,--package-dir}'[Directory enclosing a spec''s package.py file.]' \
               {-P,--packages}'[Top-level packages directory for Spack.]' \
               {-s,--stage-dir}'[Stage directory for a spec.]' \
               {-S,--stages}'[Top level Stage directory.]' \
               {-b,--build-dir}'[Checked out or expanded source directory for a spec (requires it to be staged first).]' \
               '*::args:__specs'
}
###############################
# spack checksum [-h] [--keep-stage] PACKAGE ...
#
# positional arguments:
#   PACKAGE       Package to list versions for
#   versions      Versions to generate checksums for
##
__spack_checksum()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]:' \
               '--keep-stage[Don''t clean up staging area when command completes.]' \
               '*::args:__spack_packages'
}
###############################
# spack clean [-h] ...
#
# positional arguments:
#  packages    specs of packages to clean
##
__spack_clean()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    # TODO: cache potential remotes
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               '*::args:__spack_installed_packages'
    # TODO: shouldn't it be __spack_packages?
}
###############################
# spack compiler [-h] SUBCOMMAND ...
##
__spack_compiler()
{
    local -a _spack_compiler_cmds
    _spack_compiler_cmds=(
        'find:Search the system for compilers to add to Spack configuration.'
        'remove:Remove compiler by spec.'
        'list:list available compilers'
        'info:Show compiler paths.'
    )
    local curcontext="$curcontext" state line
    typeset -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               ':command:->command' \
               '*::options:->options'
    case $state in
        (command)
            _describe -t commands "spack compiler subcommand" _spack_compiler_cmds
            ;;
        (options)
            case $line[1] in
                (find|add)
                    __spack_compiler_find && ret=0
                    ;;
                (remove|rm)
                    __spack_compiler_remove && ret=0
                    ;;
                (list)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               '*--scope:Configuration scope to read from:(defaults defaults/darwin site site/darwin user user/darwin)' && ret=0
                    # TODO: Most probably darwin stuff heritated from the running machine --
                    # extrapolate appropriate values using _wanted (see __spack_package)
                    ;;
                (info)
                    __spack_compiler_info && ret=0
                    ;;
            esac
            ;;
    esac
    return ret
}
####
# spack compiler find [-h]
#                     [--scope {defaults,defaults/darwin,site,site/darwin,user,user/darwin}]
#                     ...
#
#positional arguments:
#  add_paths
##
__spack_compiler_find()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               '--scope[Configuration scope to modify]:scope:(defaults defaults/darwin site site/darwin user user/darwin)' \
               "*::args:_files"
}
####
# spack compiler remove [-h] [-a]
#                            [--scope {defaults,defaults/darwin,site,site/darwin,user,user/darwin}]
#                             compiler_spec
#positional arguments:
#  compiler_spec
##
__spack_compiler_remove()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               {-a,--all}'[Remove ALL compilers that match spec.]' \
               '--scope[Configuration scope to modify]:scope:(defaults defaults/darwin site site/darwin user user/darwin)' \
               "*::args:__spack_installed_packages"
    # TODO: filter package on compilers?
}
####
# spack compiler info [-h]
#                     [--scope {defaults,defaults/darwin,site,site/darwin,user,user/darwin}]
#                     compiler_spec
##
__spack_compiler_info()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               '--scope[Configuration scope to modify]:scope:(defaults defaults/darwin site site/darwin user user/darwin)' \
               "*::args:__spack_installed_packages"
    # TODO: filter package on compilers?
}

###############################
# spack config [-h]
#              [--scope {defaults,defaults/darwin,site,site/darwin,user,user/darwin}]
#              SUBCOMMAND ...
##
__spack_config()
{
    local -a _spack_config_cmds
    _spack_config_cmds=(
        'get:Print configuration values.'
        'edit:Edit configuration file.'
    )
    local curcontext="$curcontext" state line
    typeset -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               '--scope[Configuration scope to modify]:scope:(defaults defaults/darwin site site/darwin user user/darwin)' \
               ':command:->command' \
               '*::options:->options'
    case $state in
        (command)
            _describe -t commands "spack config subcommand" _spack_config_cmds
            ;;
        (options)
            case $line[1] in
                (get|edit)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               '*--scope:Configuration scope to read from:(defaults defaults/darwin site site/darwin user user/darwin)' && ret=0
                    ;;
            esac
            ;;
    esac
    return ret
}
###############################
# spack create [-h] [--keep-stage] [-n NAME] [-r REPO] [-N NAMESPACE]
#              [-f]
#              [url]
#
#positional arguments:
#  url                   url of package archive
##
__spack_create()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               '--keep-stage[Don''t clean up staging area when command completes.]' \
               {-n,--name}'[Override the autodetected name for the created package.]::NAME:_files' \
               {-r,--repo}'[Path to a repository where the package should be created.]::REPO:' \
               {-N,--namespace}'[Specify a namespace for the package. Must be the namespace of a repository registered with Spack.]::NAMESPACE:' \
               {-f,--force}'[Overwrite any existing package file with the same name.]' \
               '*::args:_nothing'
}
######
# spack debug [-h] SUBCOMMAND ...
#
#positional arguments:
#  SUBCOMMAND
#    create-db-tarball
#                     Create a tarball of Spack's installation metadata.
##
__spack_debug()
{
    local -a _spack_debug_cmds
    _spack_debug_cmds=(
        'create-db-tarball:Create a tarball of Spack''s installation metadata.'
    )
    local curcontext="$curcontext" state line
    typeset -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               ':command:->command' \
               '*::options:->options'
    case $state in
        (command)
            _describe -t commands "spack debug subcommand" _spack_debug_cmds
            ;;
        (options)
            case $line[1] in
                (create-db-tarball)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               '*::args:_nothing'
                    ;;
            esac
            ;;
    esac
}
###############################
# spack diy [-h] [-i] [--keep-prefix] [--skip-patch] [-q]
#           [--clean | --dirty]
#           ...
#positional arguments:
#  spec                  specs to use for install. Must contain package AND
#                        version.
##
__spack_diy()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-i,--ignore-dependencies}'[Do not try to install dependencies of requested packages.]' \
               '--keep-prefix[Don''t remove the install prefix if installation fails.]' \
               '--skip-patch[Skip patching for the DIY build.]' \
               {-q,--quiet}'[Do not display verbose build output while installing.]' \
               '--clean[Clean environment before installing package.]' \
               '--dirty[Do NOT clean environment before installing.]' \
               "*::args:__spack_packages"
    # TODO: __specs ?
}
######################################################################
# spack edit [-h] [-f] [-c | -t | -m | -r REPO | -N NAMESPACE] [name]
#
#positional arguments:
#  name                  name of package to edit
##
__spack_edit()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-f,--force}'[Open a new file in \$EDITOR even if package doesn''t exist.]' \
               '--command[Edit the command with the supplied name.]' \
               {-t,--test}'[Edit the test with the supplied name.]' \
               {-m,--module}'[Edit the main spack module with the supplied name.]' \
               {-r,--repo}'[Path to a repository to edit package in.]::REPO:' \
               {-N,--namespace}'[Specify a namespace to edit]::NAMESPACE:' \
               "*::args:__spack_installed_packages"
}
###########################################
# spack extensions [-h] [-l | -p | -d] ...
#
#positional arguments:
#  spec         Spec of package to list extensions for
##
__spack_extensions()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-l,--long}'[Show dependency hashes as well as versions.]' \
               {-p,--path}'[Show paths to extension install directories]' \
               {-d,--deps}'[Show full dependency DAG of extensions]' \
               "*::args:__specs"
}
###########################################
# spack fetch [-h] [-n] [-m] [-D] ...
#
#positional arguments:
#  packages            specs of packages to fetch
##
__spack_fetch()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-n,--no-checksum}'[Do not check packages against checksum]' \
               {-m,--missing}'[Also fetch all missing dependencies]' \
               {-D,--dependencies}'[Also fetch all dependencies]' \
               "*::args:__spack_packages"
}
#########################################################################
# spack find [-h] [-s | -p | -d] [-l] [-L] [-f] [-e | -E] [-u] [-m] [-v]
#            [-M] [-N]
#            [constraint [constraint ...]]
#
#positional arguments:
#  constraint          Constraint to select a subset of installed packages
##
__spack_find()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-s,--short}'[Show only specs (default)]' \
               {-p,--paths}'[Show paths to package install directories]' \
               {-d,--deps}'[Show full dependency DAG of installed packages]' \
               {-l,--long}'[Show dependency hashes as well as versions.]' \
               {-L,--very-long}'[Show full dependency hashes as well as versions.]' \
               {-f,--show-flags}'[Show spec compiler flags.]' \
               {-e,--explicit}'[Show only specs that were installed explicitly]'\
               {-E,--implicit}'[Show only specs that were installed as dependencies]' \
               {-u,--unknown}'[Show only specs Spack does not have a package for.]' \
               {-m,--missing}'[Show missing dependencies as well as installed specs.]' \
               {-v,--variants}'[Show variants in output (can be long)]' \
               {-M,--only-missing}'[Show only missing dependencies.]' \
               {-N,--namespace}'[Show fully qualified package names.]' \
               "*::args:_nothing"
}
#######################################
# spack flake8 [-h] [-k] [-o] [-r] ...
#
#positional arguments:
#  files                specific files to check
##
__spack_flake8()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-k,--keep-temp}'[Do not delete temporary directory where flake8 runs. Use for debugging, to see filtered files.]' \
               {-o,--output}'[Send filtered files to stdout as well as temp files.]' \
               {-r,--root-relative}'[print root-relative paths (default is cwd-relative)]' \
               "*::args:_files"
}
############################################################
# spack graph [-h] [-a | -d] [-n] [-s] [-i] [-t DEPTYPE] ...
#
#positional arguments:
#  specs                 specs of packages to graph.
##
__spack_graph()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-a,--ascii}'[Draw graph as ascii to stdout (default).]' \
               {-d,--dot}'[Generate graph in dot format and print to stdout.]' \
               {-n,--normalize}'[Skip concretization; only print normalized spec.]' \
               {-s,--static}'[Use static information from packages, not dynamic spec info.]' \
               {-i,--installed}'[Graph all installed specs in dot format (implies --dot).]' \
               {-t,--deptype}'[Comma-separated list of deptypes to traverse. default=build,link,run.]' \
               "*::args:__specs"
}
#########################################################################
# spack install [-h] [--only {package,dependencies}] [-j JOBS]
#               [--keep-prefix] [--keep-stage] [-n] [-v] [--fake]
#               [--clean | --dirty] [--run-tests] [--log-format {junit}]
#               [--log-file LOG_FILE]
#               ...
# positional arguments:
#  package               spec of the package to install
##
__spack_install()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               '--only[Select the mode of installation (default: with all deps)]:::(package dependencies):' \
               {-j,--jobs}'[Explicitly set number of make jobs.  Default is #cpus.]' \
               '--keep-prefix[Don''t remove the install prefix if installation fails.]' \
               '--keep-stage[Don''t remove the build stage if installation succeeds.]' \
               {-n,--no-checksum}'[Do not check packages against checksum]' \
               {-v,--verbose}'[Display verbose build output while installing.]' \
               '--fake[Fake install. Just remove prefix and create a fake file.]' \
               '--clean[Clean environment before installing package.]' \
               '--dirty[Do NOT clean environment before installing.]' \
               '--run-tests[Run package level tests during installation.]' \
               '--log-format[Format to be used for log files.]:::(junit):' \
               '--log-file[Filename for the log file. If not passed a default will be used.]' \
               "*::args:__spack_packages"
}
############################################################
# spack list [-h] [-d] [--format {rst,name_only}] ...
#
#positional arguments:
#  filter                Optional case-insensitive glob patterns to filter
#                        results.
##
__spack_list()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-d,--search-description}'[Filtering will also search the description for a match.]' \
               '--format[Format to be used to print the output \[default: name_only\]]:::(rst name_only):' \
               "*::args:_nothing"
}
############################################################
# spack location [-h] [-m | -r | -i | -p | -P | -s | -S | -b] ...
#
#positional arguments:
#  spec               spec of package to fetch directory for.
##
__spack_location()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-m,--module-dir}'[Spack python module directory.]' \
               {-r,--spack-root}'[Spack installation root.]' \
               {-i,--install-dir}'[Install prefix for spec (spec need not be installed).]' \
               {-p,--package-dir}'[Directory enclosing a spec''s package.py file.]' \
               {-P,--packages}'[Top-level packages directory for Spack.]' \
               {-s,--stage-dir}'[Stage directory for a spec.]' \
               {-S,--stages}'[Top level Stage directory.]' \
               {-b,--build-dir}'[Checked out or expanded source directory for a spec (requires it to be staged first).]' \
               "*::args:__specs"
    # __spack_installed_packages?
}
######
# spack mirror [-h] [-n] SUBCOMMAND ...
##
__spack_mirror()
{
    local -a _spack_mirror_cmds
    _spack_mirror_cmds=(
        'create:Create a directory to be used as a spack mirror, and fill it with package archives.'
        'add:Add a mirror to Spack.'
        'remove:Remove a mirror by name'
        'list:Print out available mirrors to the console.'
    )
    local curcontext="$curcontext" state line
    typeset -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               {-n,--no-checksum}'[Do not check fetched packages against checksum]' \
               ':command:->command' \
               '*::options:->options'
    case $state in
        (command)
            _describe -t commands "spack mirror subcommand" _spack_mirror_cmds
            ;;
        (options)
            case $line[1] in
                (create)    __spack_mirror_create;;
                (add)       __spack_mirror_add;;
                (remove|rm) __spack_mirror_remove;;
                (list)      __spack_mirror_list;;
            esac
            ;;
    esac
}
############################################################
# spack mirror add [-h]
#                  [--scope {defaults,defaults/darwin,site,site/darwin,user,user/darwin}]
#                  name url
#positional arguments:
#  name                  Mnemonic name for mirror.
#  url                   URL of mirror directory from 'spack mirror create'.
##
__spack_mirror_add()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               '--scope[Configuration scope to modify]:scope:(defaults defaults/darwin site site/darwin user user/darwin)' \
               ":name:_nothing" \
               ":url:_nothing"
}
#################################################################
# spack mirror create [-h] [-d DIRECTORY] [-f FILE] [-D] [-o] ...
#
#positional arguments:
#  specs                 Specs of packages to put in mirror
##
__spack_mirror_create()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-d,--directory}'[Directory in which to create mirror.]:directory:_directories' \
               {-f,--file}'[File with specs of packages to put in mirror.]:file:_files' \
               {-D,--dependencies}'[Also fetch all dependencies]' \
               {-o,--one-version-per-spec}'[Only fetch one ''preferred'' version per spec, not all known.]' \
               "*::args:__specs"
}
############################################################
# spack mirror remove [-h]
#                     [--scope {defaults,defaults/darwin,site,site/darwin,user,user/darwin}]
#                     name
##
__spack_mirror_remove()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               '--scope[Configuration scope to modify]:scope:(defaults defaults/darwin site site/darwin user user/darwin)' \
               "*::name:__mirrors" \
        }
############################################################
# spack mirror list [-h]
#                   [--scope {defaults,defaults/darwin,site,site/darwin,user,user/darwin}]
##
__spack_mirror_list()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               '--scope[Configuration scope to modify]:scope:(defaults defaults/darwin site site/darwin user user/darwin)'
}

##################################
# spack module [-h] SUBCOMMAND ...
##
__spack_module()
{
    local -a _spack_module_cmds
    _spack_module_cmds=(
        'refresh:Regenerate module files'
        'find:Find module files for packages'
        'rm:Remove module files'
        'loads:Prompt the list of modules associated with a constraint'
    )
    local curcontext="$curcontext" state line
    typeset -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               ':command:->command' \
               '*::options:->options'
    case $state in
        (command)
            _describe -t commands "spack module subcommand" _spack_module_cmds
            ;;
        (options)
            case $line[1] in
                (refresh) __spack_module_refresh;;
                (find)    __spack_module_find;;
                (rm)      __spack_module_remove;;
                (loads)   __spack_module_loads;;
            esac
            ;;
    esac
}
##################################################################
# spack module refresh [-h] [--delete-tree] [-m {tcl,dotkit}] [-y]
#                      [constraint [constraint ...]]
##
__spack_module_refresh()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               '--delete-tree[Delete the module file tree before refresh]' \
               {-m,--module-type}'[Type of module files]:type:(tcl dotkit)' \
               {-y,--yes-to-all}'[Assume "yes" is the answer to every confirmation request.]' \
               "*::args:_nothing"
}
########################################################################
# spack module find [-h] [-m {tcl,dotkit}] [constraint [constraint ...]]
##
__spack_module_find()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-m,--module-type}'[Type of module files]:type:(tcl dotkit)' \
               "*::args:_nothing"
}
########################################################################
# spack module rm [-h] [-m {tcl,dotkit}] [-y]
##
__spack_module_remove()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-m,--module-type}'[Type of module files]:type:(tcl dotkit)' \
               {-y,--yes-to-all}'[Assume "yes" is the answer to every confirmation request.]' \
               "*::args:_nothing"
}
########################################################################
# spack module loads [-h] [--input-only] [-p PREFIX] [-m {tcl,dotkit}]
#                    [-r]
#                    [constraint [constraint ...]]
##
__spack_module_loads()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               '--input-only[ Generate input for module command (instead of a shell script)]' \
               {-p,--prefix}'[Prepend to module names when issuing module load commands]:prefix' \
               {-m,--module-type}'[Type of module files]:type:(tcl dotkit)' \
               {-r,--dependencies}'[Recursively traverse spec dependencies]' \
               "*::args:_nothing"
}
##################################
# spack pkg [-h] SUBCOMMAND ...
##
__spack_pkg()
{
    local -a _spack_pkg_cmds
    _spack_pkg_cmds=(
        'add:add package'
        'list:List packages associated with a particular spack git revision.'
        'diff:Compare packages available in two different git revisions.'
        'added:Show packages added since a commit.'
        'removed:Show packages removed since a commit.'

    )
    local curcontext="$curcontext" state line
    typeset -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               ':command:->command' \
               '*::options:->options'
    case $state in
        (command)
            _describe -t commands "spack pkg subcommand" _spack_pkg_cmds
            ;;
        (options)
            case $line[1] in
                (add)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               "*::args:__spack_packages";;
                (added|diff|list|removed)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]'

            esac
            ;;
    esac
}

########################################################################
# spack purge [-h] [-s] [-d] [-m] [-a]
##
__spack_purge()
{
    local curcontext=$curcontext state line ret=1
    declare -A opt_args
    _arguments -s -S \
               {-h,--help}'[show this help message and exit]:' \
               {-s,--stage}'[Remove all temporary build stages (default).]' \
               {-d,--downloads}'[Remove cached downloads.]' \
               {-m,--misc-cache}'[Remove long-lived caches, like the virtual package index.]' \
               {-a,--all}'[Remove all of the above.]'
}

##################################
# spack repo [-h] SUBCOMMAND ...
##
__spack_repo()
{
    local -a _spack_repo_cmds
    _spack_repo_cmds=(
        'create:Create a new package repository.'
        'list:Show registered repositories and their namespaces.'
        'add:Add a package source to Spack''s configuration.'
        'remove:Remove a repository from Spack''s configuration.'
    )
    local curcontext="$curcontext" state line
    typeset -A opt_args
    _arguments -C \
               {-h,--help}'[show this help message and exit]' \
               ':command:->command' \
               '*::options:->options'
    case $state in
        (command)
            _describe -t commands "spack repo subcommand" _spack_repo_cmds
            ;;
        (options)
            case $line[1] in
                (create)
                    _arguments -C \
                               {-h,--help}'[show this help message and exit]' \
                               ":directory:_directories" \
                               ":namespace:";;
                (list)
                    _arguments -s -S \
                               {-h,--help}'[show this help message and exit]:' \
                               '--scope[Configuration scope to modify]:scope:(defaults defaults/darwin site site/darwin user user/darwin)';;
                (add|remove)
                    _arguments -s -S \
                               {-h,--help}'[show this help message and exit]:' \
                               '--scope[Configuration scope to modify]:scope:(defaults defaults/darwin site site/darwin user user/darwin)' \
                               "*::args:_files";;
            esac
            ;;
    esac
}



_spack "$@"
